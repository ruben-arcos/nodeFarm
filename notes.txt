// Synchronous vs. Asynchronous

Synchronous === blocking 👎🏼
    Synchronous programming ensures that each statement is executed in a sequential order, and the program waits for each operation to complete before moving on to the next one.

Example:

    const fs = require('fs');

    // Blocking code execution
    const input = fs.readFileSync('input.txt', 'utf-8');
    console.log(input)

Asynchronous === non-blocking 👍🏼
    Asynchronous programming allows certain operations to run independently in the background, enabling the program to continue executing other tasks without waiting for these asynchronous operations to complete. Asynchronous functions are often used for non-blocking tasks like handling I/O operations, timers, or events.

            *** I/O, which stands for Input/Output, refers to the interaction between a computer program and the outside world. I/O operations involve     reading from or writing to external sources, such as files, databases, network connections, or user input devices. 

Example:

    const fs = require('fs');

    // Non-blocking code execution
    const input = fs.readFile('input.txt', 'utf-8', (err, data) => {
        console.log(data);
    });
    console.log('Reading file...');


Node.js is single thread, for each app there is only one thread

Potential problem: CALLBACK HELL

Example: 

        const fs = require('fs');

        fs.readFile('start.txt', 'utf-8', (err, data1) => {
            fs.readFile(`${data1}.txt`, 'utf-8', (err, data2) => {
                fs.readFile('append.txt', 'utf-8', (err, data3) => {
                    fs.writeFile('final.txt', `${data2} ${data3}`, 'utf-8', (err) => {
                        if (err) throw err;
                        console.log('Your file has been saved :D');
                    })
                })
            })
        })

SOLUTION: Using promises or Async/Await

// Server

Local host has this address as default -----> 127.0.0.1


// Routing

Routing means implementing different actions for different URLs


*** use command D to select words and edit them at the same time

What is an HTTP header? A piece of information about the response that we are sending back 

// API

What is an API? A service from which we can request some data

JSON is a very simple text format that looks a lot like JavaScript. We have one big array which contains objects, then each object has the ID, product name, image, and so forth

when we send JSON, we need to say application/json, and for HTML, it's text/html,

*** In Node.js every file is treated as a module


/// NPM

whenever we start a new project,

is to start with npm init.

So we use npm as the command and then init.

And this will basically create a package.jason file.

Which is kind of a configuration file of our project

where all kinds of data about the project is stored.

Answer the questions asked
    1. package name: ex. node-farm
            - use url friendly name hence the use of hyphen
    2. version: press return
    3. description: Learning node.js
    4. entry point: hit return
    5. test command: press return
    6. git respository: press return
    7. kywords: press return
    8. author: my name
    9. license: press return
    
    Is this ok? press return

What the two types of dependencies are:

    1. simple dependencies 
            simple, or regular dependencies, are simply packages hat contain some code that we will include in our own code. So code upon which we built our own application, and that's why we actually call them dependencies,because our project and our code depend on them to work correctly

    2. development dependencies
            these are usually just tools for development. For example like a code bundler like Webpack, or a debugger tool or a testing library and primarily used to develop our apps

// HOW TO INSTALL DEPENDENCIES:

simple dependencies
    TYPE: npm install + name of package can also use npm i instead
    ex. nmp install slugify

development dependencies
    TYPE: npm install + dependency
    ex. npm install nodemon --save-dev
    and so this will then add an entry package.json in the dev dependencies

// Nodemon will restart server each time there is a change

// TWO TYPES OF DEPENDENCIES INSTALLATION

    1. locally - only works in this project, we can see node_module folder was created which the files contained in there are dependencies of our dependencies

    npm install nodemon --save-dev

    ex. if nodemon isn't installed globally, you need to specify an npm script on the package.json file

        "scripts": {
        "start": "nodemon index.js"
         },

         to start using it TYPE: npm start

    2. globally - available everywhere not just our project folder, but in every folder across your entire machine. So a package should be installed globally. Nodemon is a tool that can be installed globally

   TYPE: nmp i nodemon --global

   on a mac use: sudo npm i nodemon --global, then password

   ** You can also install them in both places, but global dependencies are usually always development tools makes because they are the ones who make more sense to install like that, again because they usually provide us like a nice command line interface program.


// SLUGIFY 

what is a slug?
    slug is just the last part of a URL that contains a unique string that identifies the resource that the website is displaying.

    ex. nodefarm.com/product/fresh-avocados instead of nodefarm.com/product?id=0

// 21. PACKAGE VERSIONING AND UPDATING

What does the numbers mean in this  "nodemon": "^3.0.2"?

3
0
2

Symbols:

    ^ = we accept all the patch and all the minor releases
    ~ = only accept patch releases -- a bit safer for bug fixes
    * = accepts all changes. not recommended


*** TO UNINSTALL A PACKAGE: ex. npm uninstall express


*** TO GET BACK the node_modules folder simply TYPE: npm install

*** ALWAYS SHARE package-lock.json and package.json